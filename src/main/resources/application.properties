spring.application.name=kugou-client
server.port=2001

eureka.client.serviceUrl.defaultZone=http://localhost:1001/eureka/
#eureka.client.serviceUrl.defaultZone=http://peer1:1001/eureka/,http://peer2:1002/eureka/

logging.file=${spring.application.name}.log

#eureka.instance.prefer-ip-address=true

# 健康检查
#eureka.client.healthcheck.enabled=true

# 随机端口配置
#eureka.instance.instance-id=${spring.application.name}:${random.int}
#server.port=0
#server.port=${random.int[10000,19999]}


# hystrix配置
# 调用超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=2000
# 是否开启超时时间 默认true
hystrix.command.default.execution.timeout.enabled=true
#是否开启超时时间 默认true
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=true
#是最大的并发调用getFallback() 默认10 如果超出该数，则后续的会被拒绝，如果没有实现回退逻辑的，则会抛出异常
hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests=100
#是否当故障或者拒绝发生后，一个调用尝试调用getFallback()方法  默认true
hystrix.command.default.fallback.enabled=true
#是否开启断路器用于健康监控和短路请求 默认true
hystrix.command.default.circuitBreaker.enabled=true
#设置一个窗口内的请求数，当在该窗口内(即时间内)请求数达到了该值，则断路器会被打开 默认20
hystrix.command.default.circuitBreaker.requestVolumeThreshold=30
#设置在断路打开后，拒绝请求到再次尝试请求并决定断路器是否继续打开的时间 默认5000毫秒
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=10000
#设置打开断路器并走回退逻辑的错误率 默认50
hystrix.command.default.circuitBreaker.errorThresholdPercentage=60%

# 自定义user接口的超时时间
hystrix.command.user.execution.isolation.thread.timeoutInMilliseconds=10000

# feign整合hystrix一起用，开启
feign.hystrix.enable=true



是否开启断路器用于健康监控和短路请求

默认true





%




